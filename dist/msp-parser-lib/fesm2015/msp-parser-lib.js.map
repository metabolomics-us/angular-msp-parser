{"version":3,"file":"msp-parser-lib.js","sources":["../../../projects/msp-parser-lib/src/lib/msp-parser-lib.service.ts","../../../projects/msp-parser-lib/src/lib/msp-parser-lib.module.ts","../../../projects/msp-parser-lib/src/public-api.ts","../../../projects/msp-parser-lib/src/msp-parser-lib.ts"],"sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MspParserLibService {\n  constructor(@Inject(HttpClient) private http: HttpClient, @Inject(NGXLogger) private logger: NGXLogger) { }\n\n  /**\n   * parses the name field content and modifies the spectra object accordingly\n   */\n  handleName = (value, spectra) => {\n    // check if we have a Retention Index in the name field\n    const nameMatch = /(.+)_RI(.*)/.exec(value);\n    const nameCombinedWithInstruments = /\\s*([:\\w\\d\\s-]+);/.exec(value);\n\n    if (nameMatch) {\n      // sets the new name\n      spectra.names.push(this.trim(nameMatch[1]));\n\n      // adds it as retention index\n      spectra.meta.push(\n        {name: 'Retention Index', value: this.trim(nameMatch[2]), category: this.findCategory('Retention Index')}\n      );\n    }\n    else {\n      spectra.names.push(this.trim(value));\n    }\n\n    return spectra;\n  }\n\n  /**\n   * handles a given metadata field and might does additional modifications\n   */\n  handleMetaDataField = (value, spectra, regex, category) => {\n    if (!category) {\n      category = 'none';\n    }\n\n    const extractValue = regex;\n    let match = extractValue.exec(value);\n\n    while (match != null) {\n      const name = this.trim(match[1]);\n      const parsedValue = this.trim(match[2]);\n\n      if (this.ignoreField(name, parsedValue) === false) {\n        spectra.meta.push({name, value: parsedValue, category});\n      }\n      match = extractValue.exec(value);\n    }\n\n    return spectra;\n  }\n\n  /**\n   * simple trimming function\n   */\n  trim = (str) => {\n    return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '').replace(/^\"(.*)\"$/, '$1');\n  }\n\n  /**\n   * inspects our metadata fields and does additional modifications, as required\n   */\n  inspectFields = (match, spectra) => {\n    const regexInchIKey = /.*([A-Z]{14}-[A-Z]{10}-[A-Z,0-9])+.*/;\n    // var regexSmiles = /^([^J][0-9BCOHNSOPrIFla@+\\-\\[\\]\\(\\)\\\\\\/%=#$,.~&!]{6,})$/;\n    const regexSmiles = /^([^J][0-9A-Za-z@+\\-\\[\\]\\(\\)\\\\\\/%=#$,.~&!]{6,})$/;\n\n    // if we contain an inchi key in any propterty of this field\n    if (regexInchIKey.exec(match[2])){\n      spectra.inchiKey = regexInchIKey.exec(match[2])[1];\n    }\n\n    // get an inchi\n    else if (match[1].toLowerCase() === 'inchi' || match[1].toLowerCase() === 'inchicode' || match[1].toLowerCase() === 'inchi code') {\n      spectra.inchi = this.trim(match[2]);\n    }\n\n    // get an inchi from a smile\n    else if (match[1].toLowerCase() === 'smiles' && regexSmiles.exec(match[2])) {\n      spectra.smiles = regexSmiles.exec(match[2])[1];\n    }\n\n    // comment fields have quite often additional information in them\n    else if (match[1].toLowerCase() === 'comment') {\n      spectra = this.handleMetaDataField(match[2], spectra, /(\\w+)\\s*=\\s*([0-9]*\\.?[0-9]+)/g, undefined);\n    }\n\n    // can contain a lot of different id's in case of massbank generated msp files\n    else if (match[1].toLowerCase() === 'searchid') {\n      spectra = this.handleMetaDataField(match[2], spectra, /(\\w+\\s?\\w*)+:\\s*([\\w\\d]+[ \\w\\d-]+)/g, 'Database Identifier');\n    }\n\n    // this mass bank special flag provides some derivatization information\n    else if (match[1].toLowerCase() === 'ms$focused_ion') {\n      spectra = this.handleMetaDataField(match[2], spectra, /\\s*(.+):(.+)/g, 'Derivatization');\n    }\n\n    // any other metadata field\n    else {\n      const name = match[1];\n      const value = match[2];\n\n      if (this.ignoreField(name, value) === false) {\n        // assign metadata\n        spectra.meta.push(\n          {\n            name,\n            value,\n            category: this.findCategory(name)\n          }\n        );\n      }\n    }\n\n    return spectra;\n  }\n\n  /**\n   * finds the related category for the given name, Will be an additional module at a later point TODO\n   */\n  findCategory = (name) => {\n    let category = 'none';\n    name = name.toLocaleLowerCase();\n\n    // mass spectral properties\n    if (name === '') {}\n\n    else if (name === 'num peaks' || name === 'retentionindex' || name === 'retentiontime') {\n      category = 'spectral properties';\n    }\n\n    // acquisition properties\n    else if (name === 'instrument' || name === 'instrumenttype' || name === 'ionmode' || name === 'precursormz') {\n      category = 'acquisition properties';\n    }\n\n    return category;\n  }\n\n  /**\n   * ignores a given field, if a certain value is not as exspected. Will be an additional module at a later point TODO\n   */\n  ignoreField = (name, value) => {\n    if (value.length === 0) {\n      return true;\n    }\n\n    name = name.toLowerCase();\n\n    if (name === 'num peaks' || name === 'numpeaks') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * converts the data using a callback\n   */\n  convertWithCallback = (data, callback) => {\n    this.logger.debug('starting with parsing new data set...');\n\n    /**\n     * checks for a complete block of msp data.\n     */\n    const blockRegEx = /((?:.*:\\s*[^\\n]*\\n?)+)\\n((?:\\s*[0-9]*\\.?[0-9]+\\s+[0-9]*\\.?[0-9]+[;\\n]?.*\\n?)*)/g;\n\n    /**\n     * extracts the attribures like 'name' and 'value' from a found line\n     */\n    const regExAttributes = /\\s*([a-zA-Z _$\\/]+):(.+)\\s/g;\n\n    /**\n     * first block captures meta data\n     * second block caputures spectra including floats\n     * optional third block are identifications of this ion\n     */\n    const regExSpectra = /([0-9]+\\.?[0-9]*)[ \\t]+([0-9]*\\.?[0-9]+)(?:\\s*(?:[;\\n])|(?:\"?(.+)\"?\\n?))?/g;\n    // regExSpectra = /([0-9]*\\.?[0-9]+)[ \\t]+([0-9]*\\.?[0-9]+)(?:\\s*(.*)\\n?)?/g;\n    // regExSpectra = /([0-9]*\\.?[0-9]+)\\s+([0-9]*\\.?[0-9]+)(?:\\s*\"?(.*)\"?\\n)?;?/g;\n\n    /**\n     * is this an accurate mass\n     */\n    const regExAccurateMass = /([0-9]*\\.?[0-9]{3,})/;\n\n    const buf = data.toString('utf8');\n\n    let blocks = blockRegEx.exec(buf);\n\n    // return code\n    let foundBlocks = false;\n\n    // go over all available blocks\n    while (blocks != null) {\n      // contains the resulting spectra object\n      let spectra = {meta: [], names: [], spectrum: '', accurate: false};\n\n      // parse the first block and assign\n      const current = blocks[0];\n      let match = regExAttributes.exec(current);\n\n      // builds our metadata object\n      while (match != null) {\n        match[1] = this.trim(match[1]);\n        match[2] = this.trim(match[2]);\n\n        if (match[1].toLowerCase() === 'name' || match[1].toLowerCase() === 'synon') {\n          // in case there are RI encoded we extract this information\n          spectra = this.handleName(match[2], spectra);\n        } else {\n          spectra = this.inspectFields(match, spectra);\n        }\n\n        match = regExAttributes.exec(current);\n      }\n\n      // keep only unique names\n      spectra.names = spectra.names.reduce((p, c) => {\n        if (p.indexOf(c) < 0) { p.push(c); }\n        return p;\n      }, []);\n\n      // builds the actual spectra\n      match = regExSpectra.exec(blocks[2]);\n      spectra.spectrum = '';\n      spectra.accurate = true;\n\n      while (match !== null) {\n        foundBlocks = true;\n        spectra.spectrum = spectra.spectrum + ' ' + match[1] + ':' + match[2];\n\n        // used to determine if this is an accurate mass spectra or not\n        if (!regExAccurateMass.test(match[1])) {\n          spectra.accurate = false;\n        }\n\n        if (match[3]) {\n          spectra.meta.push({\n            name: this.trim(match[3]).replace(/(^\"|\"$)/g, ''),\n            value: match[1],\n            category: 'annotation'\n          });\n        }\n\n        // get the next match\n        match = regExSpectra.exec(blocks[2]);\n      }\n\n      // assign the trimmed spectra\n      spectra.spectrum = this.trim(spectra.spectrum);\n\n      // make sure we have at least a spectrum and a name\n      if (spectra.spectrum !== '' && spectra.names.length > 0 && spectra.spectrum.length > 0) {\n        // invoke the callback function\n        callback(spectra);\n      } else {\n        callback(null);\n        this.logger.warn('invalid spectra found -> ignored');\n      }\n\n      // fetch the next matching block\n      blocks = blockRegEx.exec(buf);\n    }\n\n    return foundBlocks;\n  }\n\n  /**\n   * converts the data using a callback\n   */\n  convertFromData = (data, callback) => {\n    return this.convertWithCallback(data, callback);\n  }\n\n  /**\n   * counts the number of mass spectra in this library file\n   */\n  countSpectra = (data) => {\n    let count = 0;\n    let pos = 0;\n\n    while (pos !== -1) {\n      count++;\n      pos = data.indexOf('Num Peaks', pos + 1);\n    }\n\n    return count;\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {LoggerModule, NgxLoggerLevel} from 'ngx-logger';\nimport {MspParserLibService} from './msp-parser-lib.service';\nimport {HttpClientModule} from '@angular/common/http';\n\n@NgModule({\n  imports: [\n    LoggerModule.forRoot({\n      level: NgxLoggerLevel.DEBUG,\n      serverLogLevel: NgxLoggerLevel.OFF\n    }),\n    HttpClientModule\n  ],\n  providers: [\n    MspParserLibService\n  ]\n})\nexport class MspParserLibModule { }\n","/*\n * Public API Surface of msp-parser-lib\n */\n\nexport * from './lib/msp-parser-lib.service';\nexport * from './lib/msp-parser-lib.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}