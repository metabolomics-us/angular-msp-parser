{"version":3,"file":"msp-parser-lib.umd.js","sources":["../../../projects/msp-parser-lib/src/lib/msp-parser-lib.service.ts","../../../projects/msp-parser-lib/src/lib/msp-parser-lib.module.ts","../../../projects/msp-parser-lib/src/public-api.ts","../../../projects/msp-parser-lib/src/msp-parser-lib.ts"],"sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {NGXLogger} from 'ngx-logger';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MspParserLibService {\n  constructor(@Inject(HttpClient) private http: HttpClient, @Inject(NGXLogger) private logger: NGXLogger) { }\n\n  /**\n   * parses the name field content and modifies the spectra object accordingly\n   */\n  handleName = (value, spectra) => {\n    // check if we have a Retention Index in the name field\n    const nameMatch = /(.+)_RI(.*)/.exec(value);\n    const nameCombinedWithInstruments = /\\s*([:\\w\\d\\s-]+);/.exec(value);\n\n    if (nameMatch) {\n      // sets the new name\n      spectra.names.push(this.trim(nameMatch[1]));\n\n      // adds it as retention index\n      spectra.meta.push(\n        {name: 'Retention Index', value: this.trim(nameMatch[2]), category: this.findCategory('Retention Index')}\n      );\n    }\n    else {\n      spectra.names.push(this.trim(value));\n    }\n\n    return spectra;\n  }\n\n  /**\n   * handles a given metadata field and might does additional modifications\n   */\n  handleMetaDataField = (value, spectra, regex, category) => {\n    if (!category) {\n      category = 'none';\n    }\n\n    const extractValue = regex;\n    let match = extractValue.exec(value);\n\n    while (match != null) {\n      const name = this.trim(match[1]);\n      const parsedValue = this.trim(match[2]);\n\n      if (this.ignoreField(name, parsedValue) === false) {\n        spectra.meta.push({name, value: parsedValue, category});\n      }\n      match = extractValue.exec(value);\n    }\n\n    return spectra;\n  }\n\n  /**\n   * simple trimming function\n   */\n  trim = (str) => {\n    return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '').replace(/^\"(.*)\"$/, '$1');\n  }\n\n  /**\n   * inspects our metadata fields and does additional modifications, as required\n   */\n  inspectFields = (match, spectra) => {\n    const regexInchIKey = /.*([A-Z]{14}-[A-Z]{10}-[A-Z,0-9])+.*/;\n    // var regexSmiles = /^([^J][0-9BCOHNSOPrIFla@+\\-\\[\\]\\(\\)\\\\\\/%=#$,.~&!]{6,})$/;\n    const regexSmiles = /^([^J][0-9A-Za-z@+\\-\\[\\]\\(\\)\\\\\\/%=#$,.~&!]{6,})$/;\n\n    // if we contain an inchi key in any propterty of this field\n    if (regexInchIKey.exec(match[2])){\n      spectra.inchiKey = regexInchIKey.exec(match[2])[1];\n    }\n\n    // get an inchi\n    else if (match[1].toLowerCase() === 'inchi' || match[1].toLowerCase() === 'inchicode' || match[1].toLowerCase() === 'inchi code') {\n      spectra.inchi = this.trim(match[2]);\n    }\n\n    // get an inchi from a smile\n    else if (match[1].toLowerCase() === 'smiles' && regexSmiles.exec(match[2])) {\n      spectra.smiles = regexSmiles.exec(match[2])[1];\n    }\n\n    // comment fields have quite often additional information in them\n    else if (match[1].toLowerCase() === 'comment') {\n      spectra = this.handleMetaDataField(match[2], spectra, /(\\w+)\\s*=\\s*([0-9]*\\.?[0-9]+)/g, undefined);\n    }\n\n    // can contain a lot of different id's in case of massbank generated msp files\n    else if (match[1].toLowerCase() === 'searchid') {\n      spectra = this.handleMetaDataField(match[2], spectra, /(\\w+\\s?\\w*)+:\\s*([\\w\\d]+[ \\w\\d-]+)/g, 'Database Identifier');\n    }\n\n    // this mass bank special flag provides some derivatization information\n    else if (match[1].toLowerCase() === 'ms$focused_ion') {\n      spectra = this.handleMetaDataField(match[2], spectra, /\\s*(.+):(.+)/g, 'Derivatization');\n    }\n\n    // any other metadata field\n    else {\n      const name = match[1];\n      const value = match[2];\n\n      if (this.ignoreField(name, value) === false) {\n        // assign metadata\n        spectra.meta.push(\n          {\n            name,\n            value,\n            category: this.findCategory(name)\n          }\n        );\n      }\n    }\n\n    return spectra;\n  }\n\n  /**\n   * finds the related category for the given name, Will be an additional module at a later point TODO\n   */\n  findCategory = (name) => {\n    let category = 'none';\n    name = name.toLocaleLowerCase();\n\n    // mass spectral properties\n    if (name === '') {}\n\n    else if (name === 'num peaks' || name === 'retentionindex' || name === 'retentiontime') {\n      category = 'spectral properties';\n    }\n\n    // acquisition properties\n    else if (name === 'instrument' || name === 'instrumenttype' || name === 'ionmode' || name === 'precursormz') {\n      category = 'acquisition properties';\n    }\n\n    return category;\n  }\n\n  /**\n   * ignores a given field, if a certain value is not as exspected. Will be an additional module at a later point TODO\n   */\n  ignoreField = (name, value) => {\n    if (value.length === 0) {\n      return true;\n    }\n\n    name = name.toLowerCase();\n\n    if (name === 'num peaks' || name === 'numpeaks') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * converts the data using a callback\n   */\n  convertWithCallback = (data, callback) => {\n    this.logger.debug('starting with parsing new data set...');\n\n    /**\n     * checks for a complete block of msp data.\n     */\n    const blockRegEx = /((?:.*:\\s*[^\\n]*\\n?)+)\\n((?:\\s*[0-9]*\\.?[0-9]+\\s+[0-9]*\\.?[0-9]+[;\\n]?.*\\n?)*)/g;\n\n    /**\n     * extracts the attribures like 'name' and 'value' from a found line\n     */\n    const regExAttributes = /\\s*([a-zA-Z _$\\/]+):(.+)\\s/g;\n\n    /**\n     * first block captures meta data\n     * second block caputures spectra including floats\n     * optional third block are identifications of this ion\n     */\n    const regExSpectra = /([0-9]+\\.?[0-9]*)[ \\t]+([0-9]*\\.?[0-9]+)(?:\\s*(?:[;\\n])|(?:\"?(.+)\"?\\n?))?/g;\n    // regExSpectra = /([0-9]*\\.?[0-9]+)[ \\t]+([0-9]*\\.?[0-9]+)(?:\\s*(.*)\\n?)?/g;\n    // regExSpectra = /([0-9]*\\.?[0-9]+)\\s+([0-9]*\\.?[0-9]+)(?:\\s*\"?(.*)\"?\\n)?;?/g;\n\n    /**\n     * is this an accurate mass\n     */\n    const regExAccurateMass = /([0-9]*\\.?[0-9]{3,})/;\n\n    const buf = data.toString('utf8');\n\n    let blocks = blockRegEx.exec(buf);\n\n    // return code\n    let foundBlocks = false;\n\n    // go over all available blocks\n    while (blocks != null) {\n      // contains the resulting spectra object\n      let spectra = {meta: [], names: [], spectrum: '', accurate: false};\n\n      // parse the first block and assign\n      const current = blocks[0];\n      let match = regExAttributes.exec(current);\n\n      // builds our metadata object\n      while (match != null) {\n        match[1] = this.trim(match[1]);\n        match[2] = this.trim(match[2]);\n\n        if (match[1].toLowerCase() === 'name' || match[1].toLowerCase() === 'synon') {\n          // in case there are RI encoded we extract this information\n          spectra = this.handleName(match[2], spectra);\n        } else {\n          spectra = this.inspectFields(match, spectra);\n        }\n\n        match = regExAttributes.exec(current);\n      }\n\n      // keep only unique names\n      spectra.names = spectra.names.reduce((p, c) => {\n        if (p.indexOf(c) < 0) { p.push(c); }\n        return p;\n      }, []);\n\n      // builds the actual spectra\n      match = regExSpectra.exec(blocks[2]);\n      spectra.spectrum = '';\n      spectra.accurate = true;\n\n      while (match !== null) {\n        foundBlocks = true;\n        spectra.spectrum = spectra.spectrum + ' ' + match[1] + ':' + match[2];\n\n        // used to determine if this is an accurate mass spectra or not\n        if (!regExAccurateMass.test(match[1])) {\n          spectra.accurate = false;\n        }\n\n        if (match[3]) {\n          spectra.meta.push({\n            name: this.trim(match[3]).replace(/(^\"|\"$)/g, ''),\n            value: match[1],\n            category: 'annotation'\n          });\n        }\n\n        // get the next match\n        match = regExSpectra.exec(blocks[2]);\n      }\n\n      // assign the trimmed spectra\n      spectra.spectrum = this.trim(spectra.spectrum);\n\n      // make sure we have at least a spectrum and a name\n      if (spectra.spectrum !== '' && spectra.names.length > 0 && spectra.spectrum.length > 0) {\n        // invoke the callback function\n        callback(spectra);\n      } else {\n        callback(null);\n        this.logger.warn('invalid spectra found -> ignored');\n      }\n\n      // fetch the next matching block\n      blocks = blockRegEx.exec(buf);\n    }\n\n    return foundBlocks;\n  }\n\n  /**\n   * converts the data using a callback\n   */\n  convertFromData = (data, callback) => {\n    return this.convertWithCallback(data, callback);\n  }\n\n  /**\n   * counts the number of mass spectra in this library file\n   */\n  countSpectra = (data) => {\n    let count = 0;\n    let pos = 0;\n\n    while (pos !== -1) {\n      count++;\n      pos = data.indexOf('Num Peaks', pos + 1);\n    }\n\n    return count;\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {LoggerModule, NgxLoggerLevel} from 'ngx-logger';\nimport {MspParserLibService} from './msp-parser-lib.service';\nimport {HttpClientModule} from '@angular/common/http';\n\n@NgModule({\n  imports: [\n    LoggerModule.forRoot({\n      level: NgxLoggerLevel.DEBUG,\n      serverLogLevel: NgxLoggerLevel.OFF\n    }),\n    HttpClientModule\n  ],\n  providers: [\n    MspParserLibService\n  ]\n})\nexport class MspParserLibModule { }\n","/*\n * Public API Surface of msp-parser-lib\n */\n\nexport * from './lib/msp-parser-lib.service';\nexport * from './lib/msp-parser-lib.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["HttpClient","NGXLogger","Injectable","Inject","LoggerModule","NgxLoggerLevel","HttpClientModule","NgModule"],"mappings":"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"}